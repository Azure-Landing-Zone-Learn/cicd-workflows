name: SSH to VM, Install Docker, and Deploy Container

on:
  workflow_call:
    inputs:
      ACR_NAME:
        required: true
        type: string
      IMAGE_NAME:
        required: true
        type: string
      ACR_LOGIN_SERVER:
        required: true
        type: string

jobs:
  install-and-deploy:
    runs-on: ubuntu-latest

    env:
      CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}


    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.azure_credentials }}

      - name: Run Deployment Commands on VM
        run: |
          az vm run-command invoke \
            --resource-group rg-dms-northeurope-001 \
            --name vm-be-get-dms-northeurope \
            --command-id RunShellScript \
            --scripts '
              set -x

              # Create .azure directory if it does not exist
              mkdir -p ~/.azure

              # Install Docker if not already installed
              if ! command -v docker &> /dev/null; then
                echo "Docker not found, installing..."
                curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
                sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
                sudo apt-get update
                sudo apt install -y docker-ce
                sudo systemctl start docker
                sudo systemctl enable docker
              else
                echo "Docker is already installed."
              fi

              # Install Azure CLI if not already installed
              if ! command -v az &> /dev/null; then
                echo "Azure CLI not found, installing..."
                curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
              else
                echo "Azure CLI is already installed."
              fi

              echo "Client ID: $CLIENT_ID"
              echo "ACR Name: $ACR_NAME"
              echo "Image Name: $IMAGE_NAME"
              echo "Login Server: $ACR_LOGIN_SERVER"

              # Azure CLI Login
              az login --service-principal -u $CLIENT_ID -p $CLIENT_SECRET --tenant $TENANT_ID

              # ACR Login
              sudo az acr login --name $ACR_NAME

              # Docker Pull Image
              sudo docker pull $ACR_LOGIN_SERVER/$IMAGE_NAME:latest

              # Stop and Remove any existing container
              sudo docker stop my_container || true
              sudo docker rm my_container || true

              # Run new container
              sudo docker run -d --name my_container -p 80:80 $ACR_LOGIN_SERVER/$IMAGE_NAME:latest

              # Check if the container is running
              if [ -z "$(docker ps -a -q --filter name=my_container)" ]; then
                echo "Error: No containers are running."
                exit 1
              else
                echo "Container my_container is running successfully."
                docker ps -a
              fi
            ' 
        env:
          ACR_NAME: ${{ inputs.ACR_NAME }}
          ACR_LOGIN_SERVER: ${{ inputs.ACR_LOGIN_SERVER }}
          IMAGE_NAME: ${{ inputs.IMAGE_NAME }}
          CLIENT_ID: env.CLIENT_ID
          CLIENT_SECRET: env.CLIENT_SECRET
          TENANT_ID: env.TENENAT_ID
